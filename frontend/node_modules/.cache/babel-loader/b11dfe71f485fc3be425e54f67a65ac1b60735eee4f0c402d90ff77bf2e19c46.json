{"ast":null,"code":"var _jsxFileName = \"/Users/yoshidaren/Desktop/work/calendar_app/frontend/src/components/Calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport axios from 'axios';\nimport EventForm from './EventForm';\nimport Modal from './Modal';\nimport { deleteEvent } from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false); // モーダルの開閉状態\n  const [selectedEvent, setSelectedEvent] = useState(null); // クリックされた予定の詳細\n\n  // イベントをバックエンドから取得\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5003/api/events');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n\n  // 日付クリック時の処理（予定を追加）\n  const handleDateClick = async arg => {\n    if (modalOpen) {\n      return;\n    } else {\n      const eventTitle = prompt('予定を入力してください');\n      if (!eventTitle) return;\n    }\n    const newEvent = {\n      title: eventTitle,\n      start: arg.dateStr,\n      end: arg.dateStr,\n      description: '',\n      location: ''\n    };\n    try {\n      const response = await axios.post('http://localhost:5003/api/events', newEvent);\n      console.log(\"追加されたイベント:\", response.data); // デバッグ用\n      setEvents([...events, response.data]); // 追加されたイベントを反映\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  // 予定がクリックされたときに詳細を取得してモーダルを開く\n  const handleEventClick = clickInfo => {\n    const eventDetails = {\n      _id: clickInfo.event._def.extendedProps._id,\n      title: clickInfo.event.title,\n      start: clickInfo.event.start,\n      end: clickInfo.event.end,\n      description: clickInfo.event.extendedProps.description,\n      location: clickInfo.event.extendedProps.location\n    };\n    console.log('Event details for modal:', eventDetails); // モーダルに渡す前に確認\n\n    setSelectedEvent(eventDetails); // eventDetails を setSelectedEvent にセット\n    setModalOpen(true); // モーダルを開く\n  };\n\n  // モーダルを閉じる処理\n  const closeModal = () => {\n    setModalOpen(false); // モーダルを閉じる\n  };\n\n  // イベントの削除処理\n  const handleEventDelete = async eventId => {\n    try {\n      await deleteEvent(eventId);\n      console.log('Event deleted:', eventId);\n      setEvents(events.filter(event => event._id !== eventId)); // ローカルの状態を更新\n      fetchEvents(); // バックエンドから最新のデータを更新\n      serModalOpen(false);\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"My Calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventForm, {\n      fetchEvents: fetchEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      events: events,\n      dateClick: handleDateClick,\n      eventClick: handleEventClick // イベントクリック時の処理\n      ,\n      eventTimeFormat: {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), modalOpen && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalOpen,\n      eventDetails: selectedEvent // モーダルに渡すイベントの詳細\n      ,\n      onClose: closeModal // モーダルを閉じる関数\n      ,\n      onDelete: handleEventDelete // 削除関数を渡す\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"H0KUGkncTVpEnzlSWxSKUuMhLuc=\");\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","interactionPlugin","axios","EventForm","Modal","deleteEvent","jsxDEV","_jsxDEV","Calendar","_s","events","setEvents","modalOpen","setModalOpen","selectedEvent","setSelectedEvent","fetchEvents","response","get","data","error","console","handleDateClick","arg","eventTitle","prompt","newEvent","title","start","dateStr","end","description","location","post","log","handleEventClick","clickInfo","eventDetails","_id","event","_def","extendedProps","closeModal","handleEventDelete","eventId","filter","serModalOpen","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","dateClick","eventClick","eventTimeFormat","hour","minute","hour12","isOpen","onClose","onDelete","_c","$RefreshReg$"],"sources":["/Users/yoshidaren/Desktop/work/calendar_app/frontend/src/components/Calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport axios from 'axios';\nimport EventForm from './EventForm';\nimport Modal from './Modal'\nimport { deleteEvent } from '../api';\n\nconst Calendar = () => {\n  const [events, setEvents] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false); // モーダルの開閉状態\n  const [selectedEvent, setSelectedEvent] = useState(null); // クリックされた予定の詳細\n\n  // イベントをバックエンドから取得\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n\n  const fetchEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:5003/api/events');\n      setEvents(response.data);\n    } catch (error) {\n      console.error('Error fetching events:', error);\n    }\n  };\n\n  // 日付クリック時の処理（予定を追加）\n  const handleDateClick = async (arg) => {\n    if (modalOpen){\n      return;\n    } else {\n      const eventTitle = prompt('予定を入力してください');\n      if (!eventTitle) return;\n    }\n\n    const newEvent = {\n      title: eventTitle,\n      start: arg.dateStr,\n      end: arg.dateStr,\n      description: '',\n      location: '',\n    };\n\n    try {\n      const response = await axios.post('http://localhost:5003/api/events', newEvent);\n      console.log(\"追加されたイベント:\", response.data); // デバッグ用\n      setEvents([...events, response.data]); // 追加されたイベントを反映\n    } catch (error) {\n      console.error('Error adding event:', error);\n    }\n  };\n\n  // 予定がクリックされたときに詳細を取得してモーダルを開く\n  const handleEventClick = (clickInfo) => {\n    const eventDetails = {\n      _id: clickInfo.event._def.extendedProps._id,\n      title: clickInfo.event.title,\n      start: clickInfo.event.start,\n      end: clickInfo.event.end,\n      description: clickInfo.event.extendedProps.description,\n      location: clickInfo.event.extendedProps.location,\n    };\n\n    console.log('Event details for modal:', eventDetails); // モーダルに渡す前に確認\n\n    setSelectedEvent(eventDetails);  // eventDetails を setSelectedEvent にセット\n    setModalOpen(true);  // モーダルを開く\n  };\n\n  // モーダルを閉じる処理\n  const closeModal = () => {\n    setModalOpen(false); // モーダルを閉じる\n  };\n\n  // イベントの削除処理\n  const handleEventDelete = async (eventId) => {\n    try {\n      await deleteEvent(eventId);\n      console.log('Event deleted:', eventId);\n      setEvents(events.filter(event => event._id !== eventId)); // ローカルの状態を更新\n      fetchEvents(); // バックエンドから最新のデータを更新\n      serModalOpen(false);\n    } catch (error) {\n      console.error('Error deleting event:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>My Calendar</h2>\n      {/* 予定追加フォーム */}\n      <EventForm fetchEvents={fetchEvents} />\n\n      <FullCalendar \n        plugins={[dayGridPlugin, interactionPlugin]}\n        initialView=\"dayGridMonth\"\n        events={events}\n        dateClick={handleDateClick}\n        eventClick={handleEventClick}  // イベントクリック時の処理\n        eventTimeFormat={{\n          hour: '2-digit',\n          minute: '2-digit',\n          hour12: false\n        }}\n      />\n\n      {/* モーダルを表示 */}\n      {modalOpen && (\n        <Modal \n          isOpen={modalOpen}\n          eventDetails={selectedEvent} // モーダルに渡すイベントの詳細\n          onClose={closeModal} // モーダルを閉じる関数\n          onDelete={handleEventDelete} // 削除関数を渡す\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}